package com.armishev.tvm.telegrambot;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.Writer;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.UUID;

import com.armishev.tvm.telegrambot.models.AlertDraft;
import org.eclipse.jgit.api.Git;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.yaml.snakeyaml.DumperOptions;
import org.yaml.snakeyaml.LoaderOptions;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.SafeConstructor;
import org.yaml.snakeyaml.representer.Representer;

@Component
public class TelegramBot extends TelegramLongPollingBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramBot.class);

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${imagerenderer.url}")
    private String imageRendererUrl;

    @Value("${git.repo.url}")
    private String gitRepoUrl;

    private final Map<Long, AlertDraft> alertSessions = new HashMap<>();
    private final Map<Long, String> customDashboardUrls = new HashMap<>();


    public TelegramBot(@Value("${telegram.bot.token}") String botToken) {
        super(botToken);
        this.botToken = botToken;
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText().trim();
            Long chatId = update.getMessage().getChatId();
            String response;


            if (processAlertDraft(messageText, chatId)) {
                return;
            }

            if (processMetricsCommand(messageText, chatId)) {
                return;
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            handleBotCommand(messageText, chatId);
        }
    }

    private void handleBotCommand(String messageText, Long chatId) {
        String response;
        switch (messageText.toLowerCase()) {
            case "/start":
                response = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è " +
                        "—Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.";
                sendText(chatId, response);
                break;

            case "/help":
                response = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
                        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n" +
                        "/test - –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É\n" +
                        "/metrics - –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n" +
                        "/setMetrics <url> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /metrics\n" +
                        "/resetMetrics - —Å–±—Ä–æ—Å–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ—Ç—Ä–∏–∫–∏ –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é\n" +
                        "/addAlert - –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–ª–µ—Ä—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n" +
                        "/listAlerts - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤—è";
                sendText(chatId, response);
                break;

            case "/test":
                response = "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!";
                sendText(chatId, response);
                break;

            case "/metrics":
                try {
                    String url = customDashboardUrls.getOrDefault(chatId, "http://147.45.150" +
                            ".56:4000/public-dashboards/9191b094754e459688fa1aaeecb77794");
                    byte[] imageBytes = getScreenshot(url);
                    sendPhoto(chatId, imageBytes);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {}", e.getMessage());
                    sendText(chatId, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.");
                }
                break;

            case "/listalerts":
                sendText(chatId, "üìã –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤...");
                try {
                    String list = listAlertsFromGit();
                    sendText(chatId, list);
                } catch (Exception e) {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤: {}", e.getMessage());
                    sendText(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤.");
                }
                break;

            default:
                response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
                sendText(chatId, response);
                break;
        }
    }

    private boolean processMetricsCommand(String messageText, Long chatId) {
        if (messageText.toLowerCase().startsWith("/setmetrics")) {
            String[] parts = messageText.split("\\s+", 2);
            if (parts.length < 2) {
                sendText(chatId, "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/setmetrics http://example" +
                        ".com/dashboard");
            } else {
                String url = parts[1];
                if (!url.startsWith("http")) {
                    sendText(chatId, "‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                } else {
                    customDashboardUrls.put(chatId, url);
                    sendText(chatId, "‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!");
                }
            }
            return true;
        }

        if (messageText.equalsIgnoreCase("/resetmetrics")) {
            customDashboardUrls.remove(chatId);
            sendText(chatId, "üîÑ –°—Å—ã–ª–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            return true;
        }
        return false;
    }

    private boolean processAlertDraft(String messageText, Long chatId) {
        if (messageText.equalsIgnoreCase("/addalert")) {
            alertSessions.put(chatId, new AlertDraft(null, null, null, null, null, null, 1));
            sendText(chatId, "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞:");
            return true;
        }

        AlertDraft draft = alertSessions.get(chatId);
        if (draft != null) {
            if (messageText.isBlank()) {
                sendText(chatId, "‚ùó –ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
                return true;
            }
            switch (draft.getStep()) {
                case 1:
                    draft.setAlertName(messageText + "_" + UUID.randomUUID().toString().substring(0, 5));
                    draft.setStep(2);
                    sendText(chatId, "üîç –í–≤–µ–¥–∏—Ç–µ PromQL –≤—ã—Ä–∞–∂–µ–Ω–∏–µ (expr):");
                    break;
                case 2:
                    if (!messageText.matches("^[a-zA-Z_]+\\(.*\\)$")) {
                        sendText(chatId, "‚ùå –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –Ω–µ PromQL. –ü—Ä–∏–º–µ—Ä: rate(http_requests_total[5m])");
                        return true;
                    }
                    draft.setExpr(messageText);
                    draft.setStep(3);
                    sendText(chatId, "‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30s):");
                    break;
                case 3:
                    if (!messageText.matches("^\\d+[smhd]$")) {
                        sendText(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 30s, 5m, 1h, 1d");
                        return true;
                    }
                    draft.setDuration(messageText);
                    draft.setStep(4);
                    sendText(chatId, "‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å severity (info, warning, critical):");
                    break;
                case 4:
                    String sev = messageText.toLowerCase();
                    if (!List.of("info", "warning", "critical").contains(sev)) {
                        sendText(chatId, "‚ùå –£—Ä–æ–≤–µ–Ω—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ: info, warning, critical");
                        return true;
                    }
                    draft.setSeverity(messageText);
                    draft.setStep(5);
                    sendText(chatId, "üìù –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (summary):");
                    break;
                case 5:
                    draft.setSummary(messageText);
                    draft.setStep(6);
                    sendText(chatId, "üìÑ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (description):");
                    break;
                case 6:
                    draft.setDescription(messageText);
                    sendText(chatId, "‚úÖ –§–æ—Ä–º–∏—Ä—É—é –∞–ª–µ—Ä—Ç...");
                    try {
                        addAlertToGitRepo(draft);
                        sendText(chatId, "‚úÖ –ê–ª–µ—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∑–∞–ø—É—à–µ–Ω –≤ Git.");
                    } catch (Exception e) {
                        sendText(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–ª–µ—Ä—Ç–∞: " + e.getMessage());
                    }
                    alertSessions.remove(chatId);
                    break;
            }
            return true;
        }
        return false;
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    private void sendText(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        try {
            execute(message);
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è chatId {}: {}", chatId, text);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ image-renderer
    private byte[] getScreenshot(String url) {
        RestTemplate restTemplate = new RestTemplate();
        String requestUrl = UriComponentsBuilder
                .fromHttpUrl(imageRendererUrl)
                .path("/api/render")
                .queryParam("url", url)
                .build()
                .toUriString();
        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞ –∫ image-renderer, –Ω–∞–ø—Ä–∏–º–µ—Ä:
        logger.info("requestUrl: {}", requestUrl);
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º GET –∑–∞–ø—Ä–æ—Å, –æ–∂–∏–¥–∞–µ–º byte[]
        return restTemplate.getForObject(requestUrl, byte[].class);
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —á–∞—Ç
    private void sendPhoto(Long chatId, byte[] imageBytes) {
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(chatId.toString());
        // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –±–∞–π—Ç—ã –≤ InputStream –∏ –∑–∞–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        sendPhoto.setPhoto(new InputFile(new ByteArrayInputStream(imageBytes), "screenshot.png"));
        try {
            execute(sendPhoto);
            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è chatId {}", chatId);
        } catch (TelegramApiException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {}", e.getMessage());
        }
    }

    public void addAlertToGitRepo(AlertDraft draft) throws Exception {
        String repoUrl = gitRepoUrl;
        String alertFilePath = "alert_rules.yml";

        File repoDir = Files.createTempDirectory("alert-repo").toFile();
        Git.cloneRepository()
                .setURI(repoUrl)
                .setDirectory(repoDir)
                .call();

        File alertFile = new File(repoDir, alertFilePath);
        LoaderOptions loaderOptions = new LoaderOptions();
        Yaml yaml = new Yaml(new SafeConstructor(loaderOptions));
        Map<String, Object> data;

        try (InputStream input = new FileInputStream(alertFile)) {
            data = yaml.load(input);
        }

        if (data == null) {
            data = new HashMap<>();
        }
        List<Map<String, Object>> groups = (List<Map<String, Object>>) data.getOrDefault("groups", new ArrayList<>());

        // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É
        Map<String, Object> targetGroup = null;
        for (Map<String, Object> group : groups) {
            if ("BotAlerts".equals(group.get("name"))) {
                targetGroup = group;
                break;
            }
        }
        if (targetGroup == null) {
            targetGroup = new LinkedHashMap<>();
            targetGroup.put("name", "BotAlerts");
            targetGroup.put("rules", new ArrayList<>());
            groups.add(targetGroup);
        }

        List<Map<String, Object>> rules = (List<Map<String, Object>>) targetGroup.get("rules");

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–µ—Ä—Ç –∏–∑ draft
        Map<String, Object> alert = new LinkedHashMap<>();
        alert.put("alert", draft.getAlertName());
        alert.put("expr", draft.getExpr());
        alert.put("for", draft.getDuration());

        Map<String, String> labels = new LinkedHashMap<>();
        labels.put("severity", draft.getSeverity());
        alert.put("labels", labels);

        Map<String, String> annotations = new LinkedHashMap<>();
        annotations.put("summary", draft.getSummary());
        annotations.put("description", draft.getDescription());
        alert.put("annotations", annotations);

        rules.add(alert);
        data.put("groups", groups);

        DumperOptions options = new DumperOptions();
        options.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
        options.setPrettyFlow(true);
        Representer representer = new Representer(options);
        yaml = new Yaml(representer, options);

        try (Writer writer = new FileWriter(alertFile)) {
            yaml.dump(data, writer);
        }

        Git git = Git.open(repoDir);
        git.add().addFilepattern(alertFilePath).call();
        git.commit().setMessage("–î–æ–±–∞–≤–ª–µ–Ω –∞–ª–µ—Ä—Ç '" + draft.getAlertName() + "' –∏–∑ Telegram –±–æ—Ç–∞").call();
        git.push().call();

        deleteDirectory(repoDir);
    }

    public String listAlertsFromGit() throws Exception {
        String repoUrl = gitRepoUrl;
        String alertFilePath = "alert_rules.yml";

        File repoDir = Files.createTempDirectory("alert-list").toFile();
        Git.cloneRepository()
                .setURI(repoUrl)
                .setDirectory(repoDir)
                .call();

        File alertFile = new File(repoDir, alertFilePath);
        Yaml yaml = new Yaml(new SafeConstructor(new LoaderOptions()));
        Map<String, Object> data;

        try (InputStream input = new FileInputStream(alertFile)) {
            data = yaml.load(input);
        }

        StringBuilder result = new StringBuilder("üìä –°–ø–∏—Å–æ–∫ –∞–ª–µ—Ä—Ç–æ–≤:\n\n");

        List<Map<String, Object>> groups = (List<Map<String, Object>>) data.get("groups");
        for (Map<String, Object> group : groups) {
            List<Map<String, Object>> rules = (List<Map<String, Object>>) group.get("rules");
            for (Map<String, Object> rule : rules) {
                result.append("üö® ").append(rule.get("alert")).append("\n");
                result.append("üîç ").append(rule.get("expr")).append("\n");
                Map<String, String> labels = (Map<String, String>) rule.get("labels");
                if (labels != null && labels.get("severity") != null) {
                    result.append("‚ö†Ô∏è –£—Ä–æ–≤–µ–Ω—å: ").append(labels.get("severity")).append("\n");
                }
                Map<String, String> annotations = (Map<String, String>) rule.get("annotations");
                if (annotations != null && annotations.get("summary") != null) {
                    result.append("üìù ").append(annotations.get("summary")).append("\n");
                }
                result.append("\n");
            }
        }

        deleteDirectory(repoDir);
        return result.toString();
    }


    private void deleteDirectory(File directory) {
        if (directory.isDirectory()) {
            for (File file : Objects.requireNonNull(directory.listFiles())) {
                deleteDirectory(file);
            }
        }
        directory.delete();
    }


}
